# PyTIS is a Python implementation of transition interface sampling.
# Copyright (C) 2010 Titus Van Erp <Titus.VanErp@biw.kuleuven.be>,
# Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of PyTIS.
#
# PyTIS is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# PyTIS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --
"""Paths through the phase space."""


import numpy, os

from molmod.io import XYZWriter
from molmod import Molecule

from pytis.ensembles import set_boltzmann_velocities


__all__ = ["System", "State", "load_xyz", "Path"]


class State(object):
    """All the time-dependent properties of a system at a certain time step."""
    def __init__(self, pos, vel, dirname=None):
        """
           Arguments:
            | ``pos`` -- A (N,3) array with positions in bohr.
            | ``vel`` -- A (N,3) array with velocities in atomic units.

           Optional argument:
            | ``dirname`` -- The directory with the computation of the move that
                             leads towards this state.
        """
        self.pos = pos
        self.vel = vel
        self.dirname = dirname
        # a few sanity checks
        if self.pos.shape[1] != 3:
            raise TypeError("The array with atom positions must have three columns.")
        if self.vel.shape != self.pos.shape:
            raise TypeError("The arrays with positions and velocities must have the same shape.")


class System(object):
    """All the time-independent properties of a system."""

    size = property(lambda self: len(self.symbols), doc="The number of atoms")

    def __init__(self, symbols, masses, numbers=None):
        """
           Arguments:
            | ``symbols`` -- Symbols for the atoms, i.e. elements or force-field
                             atom types.
            | ``masses`` -- An array with atomic masses in atomic units.
                            (The mass of an electron is 1.0 in atomic units.)

           Optional argument:
            | ``numbers`` -- The atomic numbers

           Most arguments of the constructor are simply assigned as attributes
           of the object, except for all the initial state related info. These
           are bundled in a ``State`` object and assigned to the ``init_state``
           attribute.
        """
        self.symbols = symbols
        self.masses = masses
        self.numbers = numbers
        # a few sanity checks
        if len(self.masses) != self.size:
            raise TypeError("The number of masses and symbols must be the same.")
        if self.numbers is not None and len(self.numbers) != self.size:
            raise TypeError("The number of atom numbers and symbols must be the same.")


def load_xyz(fn_xyz, temp, masses=None):
    """Create a system and state from a simple XYZ file and a temperature.

       Arguments:
        | ``fn_xyz`` -- The filename of the XYZ file.
        | ``temp`` -- The temperature for the initial velocities.

       Optional argument:
        | ``masses`` -- An array with masses to override the IUPAC 2005
                        values from the MolMod package.
    """
    molecule = Molecule.from_file(fn_xyz)
    if masses is None:
        molecule.set_default_masses()
    else:
        molecule.masses = masses
    vel = numpy.zeros(molecule.coordinates.shape, float)
    system = System(molecule.symbols, molecule.masses, molecule.numbers)
    state = State(molecule.coordinates, vel)
    set_boltzmann_velocities(temp, system, state)
    return system, state


class Path(object):
    """A dynamic path through an ensemble"""
    def __init__(self, system, init_state, wrapper, ensemble, dirname):
        """
           Arguments:
            | ``system`` -- An object of the type ``System``.
            | ``init_state`` -- The initial state for the path, which must be
                                a ``State`` instance.
            | ``wrapper`` -- A wrapper instance for the individual moves through
                             the ensemble.
            | ``dirname`` -- A directory where all the computations of the
                             individual moves are stored in subdirectories.

           The ``frames`` attribute is a list of the states generated by
           subsequent moves. The first item is the init_state object. Subsequent
           items are added by calling the the ``run`` method.
        """
        if len(init_state.pos) != system.size:
            raise TypeError("The system and the state must have the same number of atoms.")
        self.system = system
        self.frames = [init_state]
        self.wrapper = wrapper
        self.ensemble = ensemble
        self.dirname = dirname
        #
        if os.path.isdir(self.dirname):
            raise IOError("The directory %s already exists." % dirname)
        os.mkdir(self.dirname)

    def run(self, num_moves):
        """Add a number of moves to the ``frames`` list.

           Argument:
            | ``num_moves`` -- The number of moves to add.

           This method relies on the wrapper to compute the moves.
        """
        current = self.frames[-1]
        for i in xrange(num_moves):
            current = self.ensemble.update(self.system, current)
            dirname = os.path.join(self.dirname, "frame%07i" % len(self.frames))
            current = self.wrapper.move(self.system, current, dirname)
            self.frames.append(current)

    def write_to_xyz(self, fn_xyz):
        """Write a trajectory file based on the ``frames`` list.

           Argument:
            | ``fn_xyz`` -- The filename for the trajectory.
        """
        w = XYZWriter(fn_xyz, self.system.symbols)
        for i, frame in enumerate(self.frames):
            w.dump("Frame %i" % i, frame.pos)
